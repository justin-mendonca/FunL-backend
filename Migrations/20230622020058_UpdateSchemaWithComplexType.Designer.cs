// <auto-generated />
using System;
using FunL_backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FunL_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230622020058_UpdateSchemaWithComplexType")]
    partial class UpdateSchemaWithComplexType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FunL_backend.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("FunL_backend.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdvisedMinimumAudienceAge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackdropPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CastSerialized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountriesSerialized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorsSerialized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImdbId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ImdbRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ImdbVoteCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Runtime")
                        .HasColumnType("int");

                    b.Property<string>("Tagline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TmdbId")
                        .HasColumnType("int");

                    b.Property<decimal>("TmdbRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<string>("YoutubeTrailerVideoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeTrailerVideoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("FunL_backend.Models.Genre", b =>
                {
                    b.HasOne("FunL_backend.Models.Title", null)
                        .WithMany("Genres")
                        .HasForeignKey("TitleId");
                });

            modelBuilder.Entity("FunL_backend.Models.Title", b =>
                {
                    b.OwnsOne("FunL_backend.Models.BackdropURLs", "BackdropURLs", b1 =>
                        {
                            b1.Property<int>("TitleId")
                                .HasColumnType("int");

                            b1.HasKey("TitleId");

                            b1.ToTable("Titles");

                            b1.WithOwner()
                                .HasForeignKey("TitleId");
                        });

                    b.OwnsOne("FunL_backend.Models.PosterURLs", "PosterURLs", b1 =>
                        {
                            b1.Property<int>("TitleId")
                                .HasColumnType("int");

                            b1.HasKey("TitleId");

                            b1.ToTable("Titles");

                            b1.WithOwner()
                                .HasForeignKey("TitleId");
                        });

                    b.Navigation("BackdropURLs")
                        .IsRequired();

                    b.Navigation("PosterURLs")
                        .IsRequired();
                });

            modelBuilder.Entity("FunL_backend.Models.Title", b =>
                {
                    b.Navigation("Genres");
                });
#pragma warning restore 612, 618
        }
    }
}
